#include <node.h>
#include <v8.h>
#include <windows.h>
#include <winnt.h>
#include <winerror.h>
#include <MyDriver.h>
#include <Aclapi.h>
#include <tchar.h>


using namespace v8;

void Test(const v8::FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	char* outstr;
	if (args[0]->IsUndefined()) {
		outstr = "test failed!";
	}
	else {
		String::Utf8Value str(args[0]->ToString());
		outstr = *str;
	}
	args.GetReturnValue().Set(String::NewFromUtf8(isolate, outstr));
}
void Scanf(const v8::FunctionCallbackInfo<Value>& args) {
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	char* msg = "nothing at all!";
	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));
	int result = CreateProcess("..\\MFCscanf.exe", NULL, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);
	if (!result)
	{
		msg = "createprocess failed!";
	}
	args.GetReturnValue().Set(String::NewFromUtf8(isolate, msg));
}
void Method(const v8::FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = Isolate::GetCurrent();
  HandleScope scope(isolate);
  //add begin
  char* msg = "nothing at all!";
  STARTUPINFO si, sii;
  PROCESS_INFORMATION pi, pii;

  ZeroMemory(&si, sizeof(si));
  si.cb = sizeof(si);
  ZeroMemory(&pi, sizeof(pi));
  int result = CreateProcess("..\\LoadStart.exe", NULL, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
  if (!result)
  {
	  msg = "createprocess failed!";
	  goto cleanup;
  }
  WaitForSingleObject(pi.hProcess, INFINITE);
  CloseHandle(pi.hProcess);
  CloseHandle(pi.hThread);

  ZeroMemory(&sii, sizeof(sii));
  sii.cb = sizeof(sii);
  ZeroMemory(&pii, sizeof(pii));
  result = CreateProcess("..\\process\\scanuser.exe", NULL, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &sii, &pii);
  if (!result)
  {
	  msg = "createprocess 2 failed!";
  }

  /*ZeroMemory(&si, sizeof(si));
  si.cb = sizeof(si);
  ZeroMemory(&pi, sizeof(pi));
  result = CreateProcess("C:\\Users\\WDKRemoteUser\\Desktop\\MFCscanf.exe", NULL, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
  if (!result)
  {
	  msg = "create process 3 failed!";
  }*/
  FILE* f = fopen("C:\\Users\\WDKRemoteUser\\Desktop\\ggg.supcon", "w");
  if (!f) perror("C:\\Users\\WDKRemoteUser\\Desktop\\ggg.supcon"), msg="open file failed";
  fclose(f);
 //add end
  WaitForSingleObject(pii.hProcess, INFINITE);
  CloseHandle(pii.hProcess);
  CloseHandle(pii.hThread);
  cleanup:
  args.GetReturnValue().Set(String::NewFromUtf8(isolate, msg));
}

void Init(Handle<Object> exports) {
  Isolate* isolate = Isolate::GetCurrent();
  exports->Set(String::NewFromUtf8(isolate, "hello"),
      FunctionTemplate::New(isolate, Method)->GetFunction());

  exports->Set(String::NewFromUtf8(isolate, "scanf"),
	  FunctionTemplate::New(isolate, Scanf)->GetFunction());
}

NODE_MODULE(hello, Init)
